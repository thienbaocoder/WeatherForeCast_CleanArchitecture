@page "/chat"
@using WeatherWeb.Application.Features.Chat.DTOs
@layout MainLayout
@inject WeatherWeb.Application.Abstractions.IChatBot Bot
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedLocalStorage LocalStorage
@inject Microsoft.JSInterop.IJSRuntime JS

<h3 class="mb-3">ü§ñ H·ªèi th·ªùi ti·∫øt</h3>

<div class="card mb-3">
    <div class="card-body" style="max-height:420px; overflow:auto">
        @if (messages.Count == 0)
        {
            <div class="text-muted">
                V√≠ d·ª•: <code>H√¥m nay ·ªü ƒê√† L·∫°t c√≥ m∆∞a kh√¥ng?</code> ‚Ä¢ <code>C√≥ n√™n ra ngo√†i l√∫c n√†y kh√¥ng?</code> ‚Ä¢
                <code>Ng√†y mai ·ªü H√† N·ªôi th·∫ø n√†o?</code>
            </div>
        }
        else
        {
            @foreach (var m in messages)
            {
                <div class="mb-2">
                    <span class="badge bg-secondary">@m.Role</span>
                    <div>@((MarkupString)m.Content)</div>
                </div>
            }
        }
    </div>
</div>

<div class="input-group">
    <input class="form-control" placeholder="Nh·∫≠p c√¢u h·ªèi..." @bind="input" @bind:event="oninput"
        @onkeydown="OnKeyDown" />
    <button class="btn btn-primary" @onclick="Send">G·ª≠i</button>
    <button class="btn btn-outline-secondary" title="D√πng GPS" @onclick="UseGps">
        <i class="fas fa-location-crosshairs"></i>
    </button>
</div>

@code {
    private string input = string.Empty;
    private readonly List<Msg> messages = new();

    private string? lastCity;
    private double? lat;
    private double? lon;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var last = await LocalStorage.GetAsync<string>("last-city");
            if (last.Success && !string.IsNullOrWhiteSpace(last.Value))
                lastCity = last.Value;
        }
        catch
        {
            // b·ªè qua n·∫øu ng∆∞·ªùi d√πng ch·∫∑n storage ho·∫∑c tr√¨nh duy·ªát c≈©
        }

        StateHasChanged();
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(input)) return;

        var user = input.Trim();
        messages.Add(new("B·∫°n", System.Net.WebUtility.HtmlEncode(user)));
        input = string.Empty;

        var ctx = new ChatContext
        {
            LastCity = lastCity,
            Latitude = lat,
            Longitude = lon
        };

        var reply = await Bot.AskAsync(user, ctx);

        if (!string.IsNullOrWhiteSpace(reply.CityUsed) && reply.CityUsed != "V·ªã tr√≠ hi·ªán t·∫°i")
        {
            lastCity = reply.CityUsed;
            try { await LocalStorage.SetAsync("last-city", lastCity); } catch { }
        }

        messages.Add(new("Bot", reply.Text));
        StateHasChanged();
    }
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }
    private async Task UseGps()
    {
        try
        {
            var pos = await JS.InvokeAsync<GeoPos>("weather.getCurrentPosition");
            lat = pos.latitude; lon = pos.longitude;
            messages.Add(new("Bot", "ƒê√£ b·∫≠t GPS. B·∫°n c√≥ th·ªÉ h·ªèi: <i>‚ÄúB√¢y gi·ªù c√≥ m∆∞a kh√¥ng?‚Äù</i>"));
        }
        catch
        {
            messages.Add(new("Bot", "Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c GPS. H√£y c·∫•p quy·ªÅn v·ªã tr√≠ ho·∫∑c h·ªèi k√®m t√™n th√†nh ph·ªë."));
        }
        StateHasChanged();
    }

    private record Msg(string Role, string Content);
    private record GeoPos(double latitude, double longitude);
}
